(self["webpackChunkhsdopusimport"]=self["webpackChunkhsdopusimport"]||[]).push([[743],{9743:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>V});var l=n(3673),s=n(2323),a=n(744),i=n.n(a);const r=(0,l.Wm)("img",{src:i()},null,-1),o={class:"q-mb-md"},x={class:"q-mb-md"},u={class:"q-mb-md"};function m(e,t,n,a,i,m){const c=(0,l.up)("q-item-section"),d=(0,l.up)("q-item-label"),f=(0,l.up)("q-item"),b=(0,l.up)("q-separator"),p=(0,l.up)("q-file"),h=(0,l.up)("q-card-section"),g=(0,l.up)("q-btn"),w=(0,l.up)("q-space"),v=(0,l.up)("q-card-actions"),I=(0,l.up)("q-card"),y=(0,l.up)("q-form"),S=(0,l.up)("XmlDialog"),_=(0,l.up)("q-page");return(0,l.wg)(),(0,l.j4)(_,{class:"flex flex-center"},{default:(0,l.w5)((()=>[(0,l.Wm)(y,{autocorrect:"off",autocapitalize:"off",autocomplete:"off",spellcheck:"false",greedy:"",onSubmit:e.onSubmit,onReset:e.onReset},{default:(0,l.w5)((()=>[(0,l.Wm)(I,{flat:"",bordered:"",style:{width:"900px"}},{default:(0,l.w5)((()=>[(0,l.Wm)(f,null,{default:(0,l.w5)((()=>[(0,l.Wm)(c,{avatar:""},{default:(0,l.w5)((()=>[r])),_:1}),(0,l.Wm)(c,null,{default:(0,l.w5)((()=>[(0,l.Wm)(d,null,{default:(0,l.w5)((()=>[(0,l.Uk)((0,s.zw)(e.$t("title")),1)])),_:1}),(0,l.Wm)(d,{caption:""},{default:(0,l.w5)((()=>[(0,l.Uk)((0,s.zw)(e.$t("subtitle")),1)])),_:1})])),_:1})])),_:1}),(0,l.Wm)(b),(0,l.Wm)(h,null,{default:(0,l.w5)((()=>[(0,l.Wm)("div",o,[(0,l.Wm)(p,{filled:"","lazy-rules":"",accept:".xml",counter:"",modelValue:e.model.modsXml,"onUpdate:modelValue":t[1]||(t[1]=t=>e.model.modsXml=t),label:`${e.$t("form.modsXml")}*`,hint:e.$t("form.modsXmlHint"),rules:[t=>!!t||e.$t("form.validation.required")],"counter-label":e.showSize},null,8,["modelValue","label","hint","rules","counter-label"])]),(0,l.Wm)("div",x,[(0,l.Wm)(p,{filled:"","lazy-rules":"",accept:".xslt",counter:"",modelValue:e.model.collectionsXslt,"onUpdate:modelValue":t[2]||(t[2]=t=>e.model.collectionsXslt=t),label:`${e.$t("form.collectionsXslt")}*`,hint:e.$t("form.collectionsXsltHint"),rules:[t=>!!t||e.$t("form.validation.required")],"counter-label":e.showSize},null,8,["modelValue","label","hint","rules","counter-label"])]),(0,l.Wm)("div",u,[(0,l.Wm)(p,{filled:"","lazy-rules":"",accept:".xslt",counter:"",modelValue:e.model.licencesXslt,"onUpdate:modelValue":t[3]||(t[3]=t=>e.model.licencesXslt=t),label:`${e.$t("form.licencesXslt")}*`,hint:e.$t("form.licencesXsltHint"),rules:[t=>!!t||e.$t("form.validation.required")],"counter-label":e.showSize},null,8,["modelValue","label","hint","rules","counter-label"])])])),_:1}),(0,l.Wm)(v,null,{default:(0,l.w5)((()=>[(0,l.Wm)(g,{label:e.$t("form.submit"),type:"submit",color:"primary"},null,8,["label"]),(0,l.Wm)(g,{label:e.$t("form.reset"),type:"reset",color:"primary",flat:"",class:"q-ml-sm"},null,8,["label"]),(0,l.Wm)(w),(0,l.Wm)(g,{type:"a",flat:"","text-color":"primary",onClick:e.onContact},{default:(0,l.w5)((()=>[(0,l.Uk)((0,s.zw)(e.$t("contact")),1)])),_:1},8,["onClick"])])),_:1})])),_:1})])),_:1},8,["onSubmit","onReset"]),(0,l.Wm)(S,{modelValue:e.showDialog,"onUpdate:modelValue":t[4]||(t[4]=t=>e.showDialog=t),xml:e.transformedXml,onClose:e.onCancel},null,8,["modelValue","xml","onClose"])])),_:1})}var c=n(1959),d=n(5948),f=n(3437),b=(n(71),n(5363),n(3892)),p=n.n(b);const h='<?xml version="1.0" encoding="utf-8"?>\n\x3c!--/*Transformation in OPUS 4 valides XML\n @author      Stefanie Söhnitz <stefanie.soehnitz@hs-duesseldorf.de>\n @copyright   Hochschulbibliothek Hochschule Düsseldorf, University of Applied Sciences Duesseldorf\n @licence    https://creativecommons.org/licenses/by/4.0/deed.de\n \n Literaturlisten können aus Citavi exportiert werden - Exportfilter: MODS (Metadata Object Description Schema)\n * entferne alle Attribute aus dem root Element <modsCollection>\n * entstandene Datei als opus.xml benennen und als ZIP (package.zip) packen\n * Datei über SWORD an OPUS 4 senden - Achtung: Dateigröße sollte nicht mehr als 2 KB haben, sonst wird ERROR angezeigt\n *****\n literature collections must be exported with citavi - use the export filter: MODS (Metadata Object Description Schema)\n * remove all attributes from the root element <modsCollection>\n * final XML file must be named opus.xml and packed into a package.zip\n * upload the file via SWORD (e.g. use postman) - attention: filesize should not be larger than 2KB, otherwise you get an error\n */--\x3e\n \n<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n\n  \x3c!-- <xsl:import href="outputTokens.xsl"/> --\x3e\n  <xsl:output method="xml" version="2.0" omit-xml-declaration="yes" indent="yes" encoding="utf-8"/>\n  <xsl:template match="modsCollection">\n    <import>\n      <xsl:for-each select="mods">\n        <opusDocument>\n        \n        \x3c!--Variable für language - deutsch/englisch -> bei anderen Sprachen müssen diese hier ergaenzt werden\n        *****\n        Variable for language - German/English -> for other languages these must be added here--\x3e\n          <xsl:variable name="lang">\n               <xsl:choose>\n              <xsl:when test="language/languageTerm=\'eng\'">\n                <xsl:text>eng</xsl:text>\n              </xsl:when>\n              <xsl:otherwise>\n                <xsl:text>deu</xsl:text>\n              </xsl:otherwise>\n            </xsl:choose>\n          </xsl:variable>\n      \n          <xsl:attribute name="language">\n            <xsl:value-of select="$lang"/>\n          </xsl:attribute>    \n        \n          <xsl:attribute name="type">\n            <xsl:choose>    \n                      \n              <xsl:when test="genre[contains(@valueURI,\'bookPart\')]">\n                <xsl:text>bookpart</xsl:text>\n              </xsl:when>\n              <xsl:when test="genre[contains(@valueURI,\'book\')]">\n                <xsl:text>book</xsl:text>\n              </xsl:when>\n              <xsl:when test="genre[contains(@valueURI,\'article\')]">\n                <xsl:text>article</xsl:text>\n              </xsl:when>\n              <xsl:when test="genre[contains(@valueURI,\'report\')]">\n                <xsl:text>report</xsl:text>\n              </xsl:when>\n              <xsl:when test="genre[contains(@valueURI,\'book\')]">\n                <xsl:text>report</xsl:text>\n              </xsl:when>\n              \n              <xsl:when test="note=\'Masterarbeit\'">\n                <xsl:text>masterthesis</xsl:text>\n              </xsl:when>\n              <xsl:when test="note=\'Bachelorarbeit\'">\n                <xsl:text>bachelorthesis</xsl:text>\n              </xsl:when>\n                <xsl:when test="note=\'Diplomarbeit\'">\n                <xsl:text>diplom</xsl:text>\n              </xsl:when>\n                <xsl:when test="genre[contains(@valueURI,\'doctoralThesis\')]">\n                <xsl:text>doctoralthesis</xsl:text>\n              </xsl:when>\n              \n              <xsl:otherwise>\n                <xsl:text>other</xsl:text>\n              </xsl:otherwise>\n            </xsl:choose>\n          </xsl:attribute>\n          \n          \x3c!--Seitenzahlen / pages--\x3e\n          <xsl:if test="string-length(relatedItem/part/extent/list/text()) &gt; 0">  \n            <xsl:attribute name="pageNumber">\n              <xsl:value-of select="relatedItem/part/extent/list"/>\n            </xsl:attribute>\n            <xsl:attribute name="pageFirst">\n              <xsl:value-of select="substring-before(relatedItem/part/extent/list, \'–\')"/>\n            </xsl:attribute>    \n            <xsl:attribute name="pageLast">\n              <xsl:value-of select="substring-after(relatedItem/part/extent/list, \'–\')"/>\n            </xsl:attribute>          \n          </xsl:if>\n          \n          <xsl:if test="relatedItem/part/detail[@type=\'volume\']">\n            <xsl:attribute name="volume">\n            <xsl:value-of select="relatedItem/part/detail[@type=\'volume\']/number"/>\n          </xsl:attribute>\n          </xsl:if>\n          \n          <xsl:if test="relatedItem/part/detail[@type=\'issue\']">\n            <xsl:attribute name="issue">\n              <xsl:value-of select="relatedItem/part/detail[@type=\'issue\']/number"/>\n            </xsl:attribute>\n           </xsl:if>\n           \n          <xsl:if test="relatedItem/originInfo">\n          <xsl:attribute name="publisherPlace">\n            <xsl:value-of select="relatedItem/originInfo/place/placeTerm"/>\n          </xsl:attribute>\n          </xsl:if>\n          \n          <xsl:if test="relatedItem/originInfo">\n            <xsl:attribute name="publisherName">\n              <xsl:value-of select="relatedItem/originInfo/publisher"/>\n            </xsl:attribute>\n          </xsl:if>\n              \n          <xsl:if test="originInfo">\n          <xsl:attribute name="publisherPlace">\n            <xsl:value-of select="originInfo/place/placeTerm"/>\n          </xsl:attribute>\n          </xsl:if>\n          \n          <xsl:if test="originInfo">\n          <xsl:attribute name="publisherName">\n            <xsl:value-of select="originInfo/publisher"/>\n          </xsl:attribute>\n          </xsl:if>\n          \n          <xsl:if test="originInfo">\n          <xsl:attribute name="creatingCorporation">\n            <xsl:value-of select="originInfo/publisher"/>\n          </xsl:attribute>\n          </xsl:if>\n          \n          <xsl:if test="name[@displayLabel=\'Institution\']">\n          <xsl:attribute name="creatingCorporation">\n            <xsl:value-of select="name[@displayLabel=\'Institution\']/namePart"/>\n          </xsl:attribute>\n          </xsl:if>\n          \n            <xsl:if test="name[@displayLabel=\'Institution\']">\n          <xsl:attribute name="publisherName">\n            <xsl:value-of select="name[@displayLabel=\'Institution\']/namePart"/>\n          </xsl:attribute>\n          </xsl:if>\n                    \n          <xsl:attribute name="belongsToBibliography">\n            <xsl:text>false</xsl:text>\n          </xsl:attribute>\n          \n          \x3c!--ATTENTION: serviceState muss so eingestellt werden - sonst sind Sie direkt veroeffentlicht\n          *****\n          serviceState must be set like this - otherwise you are directly published--\x3e\n          <xsl:attribute name="serverState">\n            <xsl:text>unpublished</xsl:text>\n          </xsl:attribute>\n  \n          <persons>\n            <xsl:for-each select="name">\n              <xsl:if test="role/roleTerm=\'aut\'">\n                <person>\n                  <xsl:attribute name="role">\n                     <xsl:text>author</xsl:text>\n                  </xsl:attribute>\n                  <xsl:attribute name="firstName">\n                    <xsl:value-of select="namePart[@type=\'given\']"/>\n                  </xsl:attribute>\n                  <xsl:attribute name="lastName">\n                    <xsl:value-of select="namePart[@type=\'family\']"/>\n                  </xsl:attribute>\n                </person>\n              </xsl:if>\n                \n              <xsl:if test="role/roleTerm=\'ths\'">\n                <person>\n                  <xsl:attribute name="role">\n                     <xsl:text>referee</xsl:text>\n                  </xsl:attribute>\n                  <xsl:attribute name="firstName">\n                    <xsl:value-of select="namePart[@type=\'given\']"/>\n                  </xsl:attribute>\n                  <xsl:attribute name="lastName">\n                    <xsl:value-of select="namePart[@type=\'family\']"/>\n                  </xsl:attribute>\n                </person>\n              </xsl:if>\n              \n              <xsl:if test="role/roleTerm=\'edt\'">\n                <person>\n                  <xsl:attribute name="role">\n                     <xsl:text>editor</xsl:text>\n                  </xsl:attribute>\n                  <xsl:attribute name="firstName">\n                    <xsl:value-of select="namePart[@type=\'given\']"/>\n                  </xsl:attribute>\n                  <xsl:attribute name="lastName">\n                    <xsl:value-of select="namePart[@type=\'family\']"/>\n                  </xsl:attribute>\n                </person>\n              </xsl:if>\n            </xsl:for-each>\n             \n            <xsl:for-each select="relatedItem/name">\n              <person>\n                <xsl:if test="role/roleTerm=\'edt\'">\n                  <xsl:attribute name="role">\n                      <xsl:text>editor</xsl:text>\n                  </xsl:attribute>\n                  <xsl:attribute name="firstName">\n                    <xsl:value-of select="namePart[@type=\'given\']"/>\n                  </xsl:attribute>\n                  <xsl:attribute name="lastName">\n                    <xsl:value-of select="namePart[@type=\'family\']"/>\n                  </xsl:attribute>\n                </xsl:if>\n              </person>\n             </xsl:for-each>\n          </persons>\n        \n          <dates>\n            <xsl:choose>\n    \n              <xsl:when test="genre[contains(@valueURI,\'doctoralThesis\')]">\n                <date>                  \n                  <xsl:attribute name="type">\n                    <xsl:text>completed</xsl:text>\n                  </xsl:attribute>\n                  <xsl:attribute name="monthDay">\n                    <xsl:text>-</xsl:text>\n                    <xsl:value-of select="substring(originInfo/dateIssued, 5, 6)"/>\n                  </xsl:attribute>\n                  <xsl:attribute name="year">\n                    <xsl:value-of select="substring(originInfo/dateIssued, 1, 4)" />\n                  </xsl:attribute>\n                </date>  \n                          \n                <date>\n                  <xsl:attribute name="type">\n                    <xsl:text>thesisAccepted</xsl:text>\n                  </xsl:attribute>\n                  <xsl:attribute name="year">\n                    <xsl:value-of select="substring(originInfo/dateIssued, 1, 4)" />\n                  </xsl:attribute>\n                </date>\n              </xsl:when>                \n                \n              <xsl:otherwise>\n                <date>\n                  <xsl:attribute name="type">\n                    <xsl:text>completed</xsl:text>\n                  </xsl:attribute>\n              \n                  <xsl:choose>\n                    <xsl:when test="genre[contains(@valueURI,\'article\')]">\n                      <xsl:attribute name="year">\n                        <xsl:value-of select="relatedItem/part/date"/>\n                      </xsl:attribute>\n                    </xsl:when>\n                    <xsl:when test="genre[contains(@valueURI,\'bookPart\')]">\n                      <xsl:attribute name="year">\n                        <xsl:value-of select="relatedItem/originInfo/dateIssued"/>\n                      </xsl:attribute>\n                    </xsl:when>\n                    <xsl:when test="genre[contains(@valueURI,\'report\')]">\n                      <xsl:attribute name="year">\n                        <xsl:value-of select="originInfo/dateIssued"/>\n                      </xsl:attribute>\n                    </xsl:when>\n                    <xsl:when test="genre[contains(@valueURI,\'book\')]">\n                      <xsl:attribute name="year">\n                        <xsl:value-of select="originInfo/dateIssued"/>\n                      </xsl:attribute>\n                    </xsl:when>\n                    <xsl:when test="genre[contains(@valueURI,\'lecture\')]">\n                      <xsl:attribute name="year">\n                        <xsl:value-of select="substring(originInfo/dateIssued, 1, 4)"/>\n                      </xsl:attribute>  \n                    </xsl:when>\n                    <xsl:when test="genre[contains(@valueURI,\'patent\')]">\n                      <xsl:attribute name="year">\n                        <xsl:value-of select="substring(originInfo/dateIssued, 1, 4)"/>\n                      </xsl:attribute>  \n                    </xsl:when>\n                    <xsl:when test="relatedItem">\n                      <xsl:attribute name="year">\n                        <xsl:value-of select="relatedItem/originInfo/dateIssued"/>\n                      </xsl:attribute>\n                    </xsl:when>\n                                  \n                    <xsl:otherwise>\n                      <xsl:attribute name="year">\n                      <xsl:value-of select="originInfo/dateIssued"/>\n                    </xsl:attribute>  \n                    </xsl:otherwise>\n                  </xsl:choose>\n                              \n                </date>\n              </xsl:otherwise>\n            </xsl:choose>  \n          </dates>\n          \n          <titlesMain>\n            <titleMain>\n              <xsl:attribute name="language">\n                <xsl:value-of select="$lang"/>\n              </xsl:attribute>  \n              <xsl:value-of select="titleInfo/title"/>          \n            </titleMain>  \n          </titlesMain>\n      \n          <xsl:if test="relatedItem/titleInfo">\n            <titles>\n              <title>\n                <xsl:attribute name="language">\n                    <xsl:value-of select="$lang"/>\n                  </xsl:attribute>  \n                  <xsl:attribute name="type"><xsl:text>parent</xsl:text></xsl:attribute> \n                <xsl:value-of select="relatedItem/titleInfo/title"/>    \n              </title>\n            </titles>  \n          </xsl:if>\n                    \n          <xsl:if test="abstract">\n            <abstracts>  \n              <abstract>\n                <xsl:attribute name="language">\n                  <xsl:value-of select="$lang"/>\n                </xsl:attribute>  \n                <xsl:value-of select="abstract"/>\n              </abstract>\n            </abstracts>\n          </xsl:if>\n\n          <keywords>\n            <xsl:for-each select="subject">\n              <keyword>\n                <xsl:attribute name="language">\n                  <xsl:value-of select="$lang"/>\n                </xsl:attribute>\n                <xsl:attribute name="type"><xsl:text>uncontrolled</xsl:text></xsl:attribute>\n                <xsl:value-of select="topic"/>\n              </keyword>\n            </xsl:for-each>\n          </keywords>\n          \n          \x3c!--Collection ist HSD spezifisch / hier wird es direkt den entsprechenden Fachbereichen zugeordnet\n          *****\n          Collection is HSD specific / here it is directly assigned to the corresponding departments--\x3e\n          __COLLECTIONS__DEFIONTION__\n          \n          \x3c!-- Lizenzen - wenn es keine gibt wird standardmäßig immer auf "Keine Lizenz - Nur Metadaten gestellt" hingewiesen\n          *****\n          Licenses - if there are none, the default is always "No license - Only metadata provided"--\x3e\n          __LICENCES__DEFINITION__\n          \n          \n          <identifiers>\n            <xsl:if test="identifier[@type=\'isbn\']">\n              <identifier>\n                <xsl:attribute name="type"><xsl:text>isbn</xsl:text></xsl:attribute>              \n                <xsl:value-of select="identifier[@type=\'isbn\']"/>      \n              </identifier>\n            </xsl:if>\n            \n            <xsl:if test="relatedItem/identifier[@type=\'isbn\']">\n              <identifier>\n                <xsl:attribute name="type"><xsl:text>isbn</xsl:text></xsl:attribute>              \n                <xsl:value-of select="relatedItem/identifier[@type=\'isbn\']"/>      \n              </identifier>\n            </xsl:if>  \n                        \n            <xsl:if test="identifier[@type=\'urn\']">\n              <identifier>\n                <xsl:attribute name="type"><xsl:text>urn</xsl:text></xsl:attribute>              \n                <xsl:value-of select="identifier[@type=\'urn\']"/>      \n              </identifier>\n            </xsl:if>\n            \n            <xsl:if test="identifier[@type=\'doi\']">\n              <identifier>\n                <xsl:attribute name="type"><xsl:text>doi</xsl:text></xsl:attribute>              \n                <xsl:value-of select="identifier[@type=\'doi\']"/>      \n              </identifier>\n            </xsl:if>\n          \n            <xsl:if test="location/url">\n              <identifier>\n                <xsl:attribute name="type"><xsl:text>url</xsl:text></xsl:attribute>              \n                <xsl:value-of select="location/url"/>      \n              </identifier>\n            </xsl:if>\n          </identifiers>\n          \n          <xsl:if test="string-length(note[@displayLabel=\'Notiz\']/text()) &gt; 0">\n            <notes>\n              <note>\n                <xsl:attribute name="visibility">\n                  <xsl:text>public</xsl:text>\n                </xsl:attribute>\n                <xsl:value-of select="note[@displayLabel=\'Notiz\']"/>\n              </note>\n            </notes>\n          </xsl:if>\n  \n        \n        </opusDocument>        \n      </xsl:for-each>\n    </import>\n  </xsl:template>  \n\n</xsl:stylesheet>\n';function g(e){return new Promise((t=>{const n=new FileReader;n.onload=e=>{t(e.target.result)},n.readAsText(e)}))}function w(e){return Promise.all([g(e.modsXml),g(e.collectionsXslt),g(e.licencesXslt)]).then((([e,t,n])=>{const l=h.replace("__COLLECTIONS__DEFIONTION__",t).replace("__LICENCES__DEFINITION__",n),s=e.replace(/dcterms:/g,"").replace(/<modsCollection (.*)>/,"<modsCollection>"),a=new DOMParser,i=a.parseFromString(s,"text/xml"),r=a.parseFromString(l,"text/xml"),o=new XSLTProcessor;o.importStylesheet(r);const x=o.transformToDocument(i);return x.documentElement.outerHTML}))}function v(e){const t=new(p());return t.file("opus.xml",e),t.generateAsync({type:"blob"})}function I(e,t,n,a,i,r){const o=(0,l.up)("q-item-label"),x=(0,l.up)("q-item-section"),u=(0,l.up)("q-item"),m=(0,l.up)("q-separator"),c=(0,l.up)("q-input"),d=(0,l.up)("q-btn"),f=(0,l.up)("q-space"),b=(0,l.up)("q-card-actions"),p=(0,l.up)("q-card"),h=(0,l.up)("q-dialog");return(0,l.wg)(),(0,l.j4)(h,{"model-value":n.modelValue,persistent:"","no-esc-dismiss":"","no-backdrop-dismiss":"","onUpdate:modelValue":t[2]||(t[2]=t=>e.$emit("update:modelValue",t))},{default:(0,l.w5)((()=>[(0,l.Wm)(p,{style:{width:"700px","max-width":"80vw"}},{default:(0,l.w5)((()=>[(0,l.Wm)(u,null,{default:(0,l.w5)((()=>[(0,l.Wm)(x,null,{default:(0,l.w5)((()=>[(0,l.Wm)(o,null,{default:(0,l.w5)((()=>[(0,l.Uk)((0,s.zw)(e.$t("transformation.title")),1)])),_:1}),(0,l.Wm)(o,{caption:""},{default:(0,l.w5)((()=>[(0,l.Uk)((0,s.zw)(e.$t("transformation.subtitle")),1)])),_:1})])),_:1})])),_:1}),(0,l.Wm)(m),(0,l.Wm)(c,{style:{"max-height":"70vh"},class:"scroll q-px-md",type:"textarea",readonly:"","model-value":n.xml,rows:"25"},null,8,["model-value"]),(0,l.Wm)(m),(0,l.Wm)(b,null,{default:(0,l.w5)((()=>[(0,l.Wm)(d,{label:e.$t("form.download"),color:"primary",class:"q-ml-sm",onClick:a.onDownload},null,8,["label","onClick"]),(0,l.Wm)(f),(0,l.Wm)(d,{label:e.$t("form.cancel"),color:"primary",flat:"",class:"q-ml-sm",onClick:t[1]||(t[1]=t=>e.$emit("close"))},null,8,["label"])])),_:1})])),_:1})])),_:1},8,["model-value"])}var y=n(3139);const S={props:{modelValue:{type:Boolean,required:!0},xml:{type:String,required:!0}},emits:["close","update:modelValue"],setup(e){const t=()=>{v(e.xml).then((e=>{(0,y.saveAs)(e,"opos.zip")}))};return{onDownload:t}}};var _=n(1507),k=n(151),C=n(3414),W=n(2035),q=n(2350),z=n(5869),D=n(2426),N=n(9367),T=n(8240),$=n(2025),U=n(7518),X=n.n(U);S.render=I;const Z=S;X()(S,"components",{QDialog:_.Z,QCard:k.Z,QItem:C.Z,QItemSection:W.Z,QItemLabel:q.Z,QSeparator:z.Z,QInput:D.Z,QCardActions:N.Z,QBtn:T.Z,QSpace:$.Z});const L=(0,l.aZ)({components:{XmlDialog:Z},setup(){const{t:e}=(0,d.QT)(),t=(0,c.iH)({modsXml:null,collectionsXslt:null,licencesXslt:null}),n=(0,c.iH)(!1),l=(0,c.iH)(""),s=()=>{const e=(0,c.IU)(t.value);w(e).then((e=>{l.value=e,n.value=!0}))},a=()=>{t.value={modsXml:null}},i=()=>{n.value=!1,w.value="",a()},r=({totalSize:e})=>e,o=()=>(0,f.Z)(e("contactMailTo"));return{model:t,onSubmit:s,onReset:a,showSize:r,onCancel:i,onContact:o,showDialog:n,transformedXml:l}}});var Q=n(4379),R=n(5269),O=n(5589),P=n(9116);L.render=m;const V=L;X()(L,"components",{QPage:Q.Z,QForm:R.Z,QCard:k.Z,QItem:C.Z,QItemSection:W.Z,QItemLabel:q.Z,QSeparator:z.Z,QCardSection:O.Z,QFile:P.Z,QCardActions:N.Z,QBtn:T.Z,QSpace:$.Z})},744:(e,t,n)=>{e.exports=n.p+"img/logo.9cbf83ac.png"}}]);